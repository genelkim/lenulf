Version 4 of the English-to-ULF parser (Jan 31/22), and TT version of Aug 20/21

Updated Mar 1/22
=================================================================
Jan 31/22

The list of files being loaded by "init.lisp" has not changed.
But there have been numerous changes (not logged, alas) in rules 
(e.g., in "preprocessing-rules.lisp" and "isa.lisp") and in various 
types of lexical information (e.g., in "transitivity-lists.lisp",
and "subcat-pref.lisp")

SEE ALSO "README-SUPPLEMENT-FOR-BROWN-CORPUS", & "REVISION-LOG".
=================================================================

The main ULF-derivation programs are in "parse-tree-to-ulf.lisp"

After doing
  (load "init.lisp"),
the 'parse-tree-to-ulf' and 'english-to-ulf' functions can be used.

The easiest way to try the ULF parser is copy the definition of the
'ulf' function (an abbreviation of 'english-to-ulf') that is offered 
to the user when "init.lisp" is loaded, and to try things like 
  (ulf "This is a test.")

The constituent parser is still BLLIP rather than K&K (alas). Hannah's
instructions for installing the K&K parser are in "kk-parser-installation".

The parser is in verbose mode by default, showing the rules it tries;
To quiet it down, use (setq *show-stages* nil).

The lexical-level ULF derivation code is in 
   pos+word-to-ulf.lisp
This also requires loading of "stem.lisp" (a variant of previous versions)

The tree transduction code is in "tt.lisp"

TT-predicates are in "tt-match-predicates.lisp".

Feature handling (using 'isa' paths) and the features currently used for
preprocessing constituent trees are in "isa.lisp". There is also a sparsely
populated "lexical-features.lisp" (formerly "features.lisp") file that is
scarcely used. The features in "isa.lisp" and lexical information in
"verb-transitivity-lists.lisp" and "subcat-pref.lisp" are more important.

The tree preprocessing code is in 
   "preprocess-tree-for-ulf.lisp".

ULF postprocessing remains remains minimal and may never get expanded
(processing at the parse tree level is generally easier, as the "types"
like NP and VP are apparent, whereas in ULF they're not explicit except
for the dot-suffixes at the atomic level).

I have in mind a way of speeding up sequential rule application significantly,
apart from compiling, but this hasn't been the highest priority.

            -=-=-=-=-=-=-=-=-=-=-==-=-=-

"tt-syntax-documentation" provides the syntactic essentials of TT.
It also gives some simple examples for the main functions, like 'match'.

But you don't need to know this to do ULF derivation. But here are
some quick notes for potential users of TT. The new version of TT is
usable for ETA, allowing fairly easy replacement of the ETA match
language and code.

The 'match' function finds rightmost matches (while TTT finds leftmost 
matches), but that could fairly easily be changed. Rightmost matches 
are better when "soft variables" (ones allowing binding to the empty 
sequence, coded as (:seq)) are more likely to remain empty than being 
filled.

TT combines elements of TTT (e.g., using characters ?, !, *, + in predicates
that respectively match at most one expression, exactly one, 0 or more,
or at least one expression) and the ETA matching language, using numeric
indices to identify constituents (elements or sequences) of an expression,
to be used in assembling a transformed expression. TT goes further
than the language in ETA, allowing not only 1, 2, 3, ... as indices of
top-level list elements, but also 1.1, 1.2, ..., 2.1, 2.2, ... for 
second-level parts, 1.1.1, 1.1.2, ..., 2.1.1, 2.1.2, ... etc. for 3rd-
level elements, etc.

TT has no sticky variables, so bindings at diffeent tree locations can't 
be checked for identity (this would have to be done separately), but we can 
still "get at" any arbitrarily deeply nested part of a match (via the above
indices) and use these parts (expressions or expression sequences) any
way we want in the reassembly templates.

            -=-=-=-=-=-=-=-=-=-=-==-=-=-

KNOWN ISSUES
````````````

- We don't have a specific way of annotating pre-PP adverbs, e.g.,
  "deeply in debt", "forty-five feet under the ice"; possibly use
   deeply.mod-p     (mod-p (forty-five.a (plur food))

- There's no attempt to disambiguate modal auxiliaries into .AUX-V, AUX-S;
  they're just left as AUX;

- Also there's no attempt to disambiguate .ADV to .ADV-E (now), .ADV-S 
  (maybe), .ADV-A (quickly), .ADV-F (frequently), although combinations 
  like "rather quickly" becomes (ADV-A ((rather.mod-a) quick.a))

- We don't have a good way to handle participial VP[-ing] or VP[pasv]
  adjuncts; e.g., consider the two VP[-ing] adjuncts in
   "Reaching the summit, he removed his backpack, setting it on a boulder."
  Currently the code wraps (Ka ...) around such adjuncts. But actually
  the first VP[-ing] seems to have an implicit temporal 'upon.p' operating
  on it, while the second has an implicit 'thereafter.p' -- or one might
  view this conjunctively, i.e., "and then he set it on a boulder".
  Depending on aspectual category, the implict preposition could also
  be "while"; e.g., in "Standing in the doorway, he smiled at her."
  A VP[pasv] example would be "Continually harrassed by the boss, he
  decided to quit." Maybe that's elliptic for "having been continually
  harrassed by the boss", which would again make it VP[-ing]. More
  thought required!

- Comparatives of every kind (more ... than, as ... as, etc.) are handled
  poorly at this time; this will require expansion of the annotation guide;

- No proper handling of postfixed "all", e.g., "We all agree to pass them all")
  It seems we want the equivalent of "All of us agree to pass all of them"

- Sometimes coordinated items are simple listed separated by commas,
  e.g., part of a Brown sentence:
     "We owe our loyalty as legislators to our community, our district,
      our state."
  In such a case we could replace the last comma by 'and', and delete
  the others, but currently the commas are just left in place.

- Gap-denoting *h doesn't always end up in the right place.

- The ADV-E / ADV-A insertion can be faulty (not wanted or wrong choice)

- The .P vs .P-ARG distinction isn't always gotten right

- noun premodification by nouns and NNPs is just left w/o type-shifters,
  e.g., "The impressive New York skyline" might come out as
  (THE.D~3 (MOD-N IMPRESSIVE.A~4) |New| |York| SKYLINE.N);
  though sometimes noun-noun premod comes out as ((mod-n <N1> <N2>).

- There's no attempt yet to handle "set-of", as in "He brought along
  a bag of food and drinks"

- Nothing has been done about predeterminers, as in "all its components"
  which in Brown is (NP (DT all) (PRP$ its) (NNS components) ), so, two
  determiners in a row ---  (ALL.D ITS.D (PLUR COMPONENT.N))
                              

